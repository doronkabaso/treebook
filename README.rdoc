# Treebook - A Ruby on Rails Application

Treebook is a web application built using the Ruby on Rails framework, providing a comprehensive structure for developing database-backed web applications. This project follows the Model-View-Controller (MVC) design pattern to ensure a clean separation of concerns and maintainable codebase.

## Features

- **MVC Architecture**: Separates application logic (Model), user interface (View), and user interaction (Controller).
- **Object-Relational Mapping**: Utilizes Active Record to represent database rows as objects, with methods for persistence and business logic.
- **Flexible Views**: Employs Action View for templating, enabling dynamic content rendering.
- **Customizable Controllers**: Action Controller handles requests and orchestrates data flow between Models and Views.
- **Debugging Tools**: Built-in logging and debugging features for efficient issue resolution.
- **Console & Database Management**: Provides interactive console and database command-line tools.

## Tech Stack

- **Framework**: Ruby on Rails
- **Language**: Ruby
- **Database**: SQLite (default, replaceable with MySQL/PostgreSQL)
- **Server**: WEBrick/Mongrel
- **Testing**: Built-in testing framework

## Getting Started

### Prerequisites

- Ruby (latest stable version)
- RubyGems
- Rails gem
- SQLite (or another supported database)

### Steps to Setup Locally

1. Install Rails:

   ```bash
   gem install rails
   ```

2. Create a new Rails application:

   ```bash
   rails new myapp
   ```

3. Navigate to the application directory:

   ```bash
   cd myapp
   ```

4. Start the Rails server:

   ```bash
   rails server
   ```

5. Access the application:

   Visit `http://localhost:3000` in your browser to see the default Rails welcome page.

6. Begin development by following [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html).

## Debugging Rails Applications

- **Logs**: Monitor `server.log` and `development.log` files for debugging information.
- **Custom Logging**: Use the Ruby `logger` class in your controllers. Example:

  ```ruby
  logger.info("#{Time.now} Destroyed Weblog ID ##{@weblog.id}!")
  ```

- **Rails Debugger**: Install `ruby-debug` for interactive debugging. Example:

  ```bash
  gem install ruby-debug
  ```

  Add `debugger` commands in your controller to pause execution and inspect objects.

## Interactive Console

Rails provides an interactive console (`rails console`) for inspecting models, running queries, and testing application logic.

- To start the console:

  ```bash
  rails console
  ```

- Use sandbox mode to roll back any changes:

  ```bash
  rails console --sandbox
  ```

## Database Console

Access the database command line with:

```bash
rails dbconsole
```

Supported databases: SQLite, MySQL, PostgreSQL.

## Directory Structure

```plaintext
|-- app
|   |-- assets
|   |   |-- images
|   |   |-- javascripts
|   |   `-- stylesheets
|   |-- controllers
|   |-- helpers
|   |-- mailers
|   |-- models
|   `-- views
|       `-- layouts
|-- config
|   |-- environments
|   |-- initializers
|   `-- locales
|-- db
|-- doc
|-- lib
|   |-- assets
|   `-- tasks
|-- log
|-- public
|-- script
|-- test
|   |-- fixtures
|   |-- functional
|   |-- integration
|   |-- performance
|   `-- unit
|-- tmp
|   `-- cache
|       `-- assets
`-- vendor
    |-- assets
    |   |-- javascripts
    |   `-- stylesheets
    `-- plugins
```

## Useful Resources

- [Getting Started with Rails](http://guides.rubyonrails.org/getting_started.html)
- [Ruby on Rails Tutorial](http://www.railstutorial.org/)
- [Programming Ruby](http://www.ruby-doc.org/docs/ProgrammingRuby/)
- [Learn to Program](http://pine.fm/LearnToProgram/)

## Feedback

If you have any feedback or issues, please raise them via [GitHub Issues](https://github.com/doronkabaso/treebook/issues).

---

This README integrates the provided content with a modern, structured format while preserving all critical details. Let me know if further refinements are needed!

